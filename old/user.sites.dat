


ewogICAgImlkIjogIm1vbmlrYWRlc2lnbiIsCiAgICAibmFtZSI6ICJcdTgzYWJcdTU5YWVcdTUzNjEiLAogICAgImRvbWFpbiI6ICJodHRwczovL21vbmlrYWRlc2lnbi51ay8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJwcm94eSI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzP3BlclBhZ2U9MTAwJm5hbWU9e2tleXdvcmR9JmNhdGVnb3JpZXNbMF09NiZjYXRlZ29yaWVzWzFdPTcmY2F0ZWdvcmllc1syXT01JmNhdGVnb3JpZXNbM109MSZjYXRlZ29yaWVzWzRdPTgmY2F0ZWdvcmllc1s1XT0yIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAidG9ycmVudHM/cGVyUGFnZT0xMDAmcGFnZT17cGFnZX0iLAogICAgICAgICJzdGFydCI6IDEKICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZSN0b3JyZW50LWxpc3QtdGFibGUgPiB0Ym9keSA+IHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImEudmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3MtbmFtZSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImEudmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3MtbmFtZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInNwYW4udmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3Mtc3ViaGVhZCA+IGIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImEudmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3MtbmFtZSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3RvcnJlbnRzL2Rvd25sb2FkL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQudG9ycmVudC1saXN0aW5ncy1hZ2UgPiBzcGFuLmJhZGdlLWV4dHJhIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQudG9ycmVudC1saXN0aW5ncy1zaXplID4gc3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQudG9ycmVudC1saXN0aW5ncy1zZWVkZXJzID4gYSA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC50b3JyZW50LWxpc3RpbmdzLWxlZWNoZXJzID4gYSA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC50b3JyZW50LWxpc3RpbmdzLWNvbXBsZXRlZCA+IGEgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAic3Bhbi50b3JyZW50LWxpc3RpbmdzLWZyZWVsZWVjaCI6IDAsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL3NwYW5bQGNsYXNzPSdiYWRnZS1leHRyYSddW2NvbnRhaW5zKEBkYXRhLW9yaWdpbmFsLXRpdGxlLCdGcmVlJyldIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFtdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9hW0BjbGFzcz0nYmFkZ2UtZXh0cmEgdGV4dC1ncmVlbiddW2NvbnRhaW5zKEBkYXRhLW9yaWdpbmFsLXRpdGxlLCdcdTUwNWFcdTc5Y2QnKV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=


ewogICAgImlkIjogImpwdHYiLAogICAgIm5hbWUiOiAiSlBUViIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vanB0di5jbHViLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzL2ZpbHRlcj9zZWFyY2g9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAidG9ycmVudHMvZmlsdGVyP3BhZ2U9e3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LnRhYmxlLXJlc3BvbnNpdmUgPiB0YWJsZSA+IHRib2R5ID4gdHIiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYS52aWV3LXRvcnJlbnQiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhLnZpZXctdG9ycmVudCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYS52aWV3LXRvcnJlbnQiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cInRvcnJlbnRzL2Rvd25sb2FkL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpID4gdGltZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg5KSA+IGEgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDEwKSA+IGEgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDExKSA+IGEgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9zcGFuL2lbQGNsYXNzPSdmYXMgZmEtc3RhciB0ZXh0LWdvbGQnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vc3BhbltAY2xhc3M9J2JhZGdlLWV4dHJhIHRleHQtZ3JlZW4nXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogImRyYWdvbmhkIiwKICAgICJuYW1lIjogIlx1OWY5OVx1NGU0Ylx1NWJiNiIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3LmRyYWdvbmhkLnh5ei8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=


ewogICAgImlkIjogIm9wZW4iLAogICAgIm5hbWUiOiAiXHU3Njg3XHU1NDBlIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9vcGVuLmNkLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJiYXRjaCI6IHsKICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICB9LAogICAgImJyb3dzZSI6IHt9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgxMCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg5KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtjbGFzcz1cImVtYmVkZGVkXCJdID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBmb250IiwKICAgICAgICAgICAgICAgICJpbmRleCI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkLmVtYmVkZGVkID4gaSA+IGEiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5Ijoge30sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2RpdltAY2xhc3M9J3RpdGxlJ10vaW1nW0BjbGFzcz0ncHJvX2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2RpdltAY2xhc3M9J3RpdGxlJ10vaW1nW0BjbGFzcz0ncHJvX2ZyZWUydXAnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9


ewogICAgImlkIjogIkhEVSIsCiAgICAibmFtZSI6ICJcdTU5N2RcdTU5MWFcdTZjYjkiLAogICAgImRvbWFpbiI6ICJodHRwczovL3B0LmhkdXB0LmNvbS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==

ewogICAgImlkIjogIndpbnRlcnNha3VyYSIsCiAgICAibmFtZSI6ICJcdTUxYWNcdTZhMzEiLAogICAgImRvbWFpbiI6ICJodHRwczovL3dpbnRlcnNha3VyYS5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzL1x1NzUzNVx1NWY3MSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDIyLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9uIGZsaW1zL1x1NTJhOFx1NmYyYlx1NzUzNVx1NWY3MSIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInR2IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTAsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvY3VtZW50YXJpZXMvXHU3ZWFhXHU1ZjU1XHU3MjQ3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1hdGlvbiBzZXJpZXMvXHU1MmE4XHU2ZjJiXHU1MjY3XHU5NmM2KFx1NTIwNlx1OTZjNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9uIHNlcmllcy9cdTUyYThcdTZmMmJcdTUyNjdcdTk2YzYoXHU1NDA4XHU5NmM2KVx0IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1NlcmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXMvXHU1MjY3XHU5NmM2KFx1NTQwOFx1OTZjNlx1ZmYwOSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9TZXJpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1NTI2N1x1OTZjNihcdTUyMDZcdTk2YzZcdWZmMDkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvU2hvd3MiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3MvXHU3ZWZjXHU4MjdhKFx1NTQwOFx1OTZjNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxOCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvU2hvd3MiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3MvXHU3ZWZjXHU4MjdhKFx1NTIwNlx1OTZjNlx1ZmYwOSIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWdbZGF0YS1vcmlnXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtb3JpZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0YWdzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGEudG9ycmVudHMtdGFnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5lbWJlZGRlZDpudGgtY2hpbGQoMikgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDIpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4sYSxpbWcsZm9udCxiIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogInB0ZXJjbHViIiwKICAgICJuYW1lIjogIlx1NzMyYlx1N2FkOSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vcHRlcmNsdWIuY29tLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlx1NzUzNVx1NWY3MSAoTW92aWUpIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiXHU3NTM1XHU4OWM2XHU1MjY3IChUViBQbGF5KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJcdTUyYThcdTZmMmIgKEFuaW1lKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJcdTdlZmNcdTgyN2EgKFRWIFNob3cpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlx1N2VhYVx1NWY1NVx1NzI0NyAoRG9jdW1lbnRhcnkpIgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBkaXYgPiBkaXY6bnRoLWNoaWxkKDEpID4gYSA+IGIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicG9zdGVyIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZ1tkYXRhLW9yaWddIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiZGF0YS1vcmlnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBiID4gc3Bhblt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMikgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMikgPiBhLnRvcnJlbnRzLXRhZyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiKC8vdGRbQGFsaWduPSdsZWZ0JyBhbmQgQGNsYXNzPSdyb3dmb2xsb3cnIGFuZCBAdmFsaWduPSd0b3AnXS9iWzFdKVszXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIm5leHVzX3BocCIKfQ==

ewogICAgImlkIjogImhpdHB0IiwKICAgICJuYW1lIjogIlx1NzY3ZVx1NWRkZCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3LmhpdHB0LmNvbS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=

ewogICAgImlkIjogInhpbmd0YW4iLAogICAgIm5hbWUiOiAiXHU2NzRmXHU1NzViIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly94aW5ndGFuLm9uZS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucy9cdTUyYThcdTZmMmIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1OGZkZVx1N2VlZFx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nW2RhdGEtb3JpZ10iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLW9yaWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBhLnRvcnJlbnRzLXRhZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuZW1iZWRkZWQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMSkiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMSkgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2ltZ1tAY2xhc3M9J2hpdGFuZHJ1biddIgogICAgICAgIF0sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICJuZXh1c19waHAiCn0=

ewogICAgImlkIjogInRqdXB0IiwKICAgICJuYW1lIjogIlx1NTMxN1x1NmQwYlx1NTZlZCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3LnRqdXB0Lm9yZy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICItIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXNcdTc1MzVcdTVmNzEiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXNcdTUyNjdcdTk2YzYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3NcdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9uc1x1NTJhOFx1NmYyYiIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiY2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJpbWRiLmNvbS90aXRsZS90dFwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJmb250LmZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJmb250LnR3b3VwZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImZvbnQuaGFsZmRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImZvbnQudHdvdXBoYWxmZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiZm9udC50aGlydHlwZXJjZW50IjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvbnQudHdvdXBoYWxmZG93biI6IDIsCiAgICAgICAgICAgICAgICAgICAgImZvbnQudHdvdXBmcmVlIjogMiwKICAgICAgICAgICAgICAgICAgICAiZm9udC50d291cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyOm50aC1jaGlsZCgxKSA+IHRkOm50aC1jaGlsZCgyKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogImEsIGltZywgZGl2IiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0cjpudGgtY2hpbGQoMikgPiB0ZDpudGgtY2hpbGQoMikgPiBkaXYjdGFnID4gZm9udC50YWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtaW5pbXVtcmF0aW8iOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6IDAuOAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9mb250W0BjbGFzcz0ndHdvdXAnXVt0ZXh0KCk9JzJYJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbCiAgICAgICAgICAgICIvL2ZvbnRbQGNvbG9yPSdyZWQnXVt0ZXh0KCk9J0hpdCZSdW4nXSIKICAgICAgICBdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogIlRDQ0YiLAogICAgIm5hbWUiOiAiXHU0ZWQ2XHU1NDM5XHU1NDM5XHU5OGNlIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9ldDgub3JnLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmltZGJfMTAwID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWcucHJvX2ZyZWUsaW1nLnByb19mcmVlMnVwIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAib25tb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrLVxcZCstXFxkKyBcXGQrOlxcZCs6XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9

ewogICAgImlkIjogInNreWV5c25vdyIsCiAgICAibmFtZSI6ICJcdTU5MjlcdTk2ZWEiLAogICAgImRvbWFpbiI6ICJodHRwczovL3d3dy5za3lleTIuY29tLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInByb3h5IjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAiZm9ydW0ucGhwP21vZD10b3JyZW50cyZjYXQ9MSZzZWFyY2g9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAiZm9ydW0ucGhwP21vZD10b3JyZW50cyZwYWdlPXtwYWdlfSIKICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRib2R5ID4gdHI6aGFzKFwidGQucm93Zm9sbG93XCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCIvZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdGJvZHkgPiB0ciA+IHRkID4gYVt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0Ym9keSA+IHRyID4gdGQgPiBhW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL2Rvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5zcF80IjogMCwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vZGl2W0BjbGFzcz0ncGknXS9iW2NvbnRhaW5zKHRleHQoKSwnRlJFRScpXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogIkhEWm9uZSIsCiAgICAibmFtZSI6ICJcdTdhN2FcdTk1ZjQiLAogICAgImRvbWFpbiI6ICJodHRwOi8vaGRmdW4ubWUvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDExLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvU0QiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIFNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTIsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgSVBhZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDEzLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIDcyMHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyAxMDgwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE1LAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIFJFTVVYIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NTAsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcy9CbHVSYXkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIEJsdXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDk5LAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvVUhEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyBVSEQgQmx1LXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE2LAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvVUhEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyAyMTYwcCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInR2IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTcsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyBTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE4LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgSVBhZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE5LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDIwLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgMTA4MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIFJFTVVYIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NTEsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyBCbHVyYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDUwMCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIFVIRCBCbHUtcmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyAyMTYwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDI1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9TRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyNiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ3MSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyNywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IDcyMHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ3MiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IDcyMHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyOCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IDEwODBpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjksCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyAxMDgwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDMwLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgUkVNVVgiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ1MiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IEJsdXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDMxLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9VSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IDIxNjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1NEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIFNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDM1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyAxMDgwaSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDM2LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyAxMDgwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDM3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyBSRU1VWCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDUzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyBCbHVyYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzOCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvVUhEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIDIxNjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NDQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIFNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ0NiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDQ3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSAxMDgwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDQ4LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSBSRU1VWCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDU0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSBCbHVyYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ0OSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgMjE2MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDUwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgVUhEIEJsdS1yYXkiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogImNhcnB0IiwKICAgICJuYW1lIjogIkNBUlBUIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9jYXJwdC5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzL1x1NzUzNVx1NWY3MSIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInR2IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNlcmllcy9cdThmZGVcdTdlZWRcdTUyNjciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucy9cdTUyYThcdTZmMmIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3MvXHU3ZWZjXHU4MjdhIgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtjbGFzcz1cImVtYmVkZGVkXCJdID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAic3BhbixhLGltZyxmb250LGIiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9pbWdbQGNsYXNzPSdoaXRhbmRydW4nXSIKICAgICAgICBdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9


ewogICAgImlkIjogIm55YWFfaW5rIiwKICAgICJuYW1lIjogIk55YWEoSW5rXHU5NTVjXHU1MGNmKSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vbnlhYS5pbmsvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogdHJ1ZSwKICAgICJwcm94eSI6IHRydWUsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAiP2Y9MCZjPTBfMCZxPXtrZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogIj9wPXtwYWdlfSIsCiAgICAgICAgInN0YXJ0IjogMQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnQtbGlzdCA+IHRib2R5ID4gdHIiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIi92aWV3L1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDMpID4gYVtocmVmKj1cIi9kb3dubG9hZC9cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9







ewogICAgImlkIjogImJ0c2Nob29sIiwKICAgICJuYW1lIjogIlx1NWI2Nlx1NjgyMSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vcHQuYnRzY2hvb2wuY2x1Yi8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJcdTc1MzVcdTVmNzEvTW92aWVzIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiXHU4ZmRlXHU3ZWVkXHU1MjY3L1RWLVNlcmllcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJcdTUyYThcdTZmMmIvQW5pbWF0aW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDgsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlx1N2VhYVx1NWY1NVx1NzI0Ny9Eb2N1bWVudGFyeSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDEyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJcdTdlZmNcdTgyN2EvVFYtU2hvdyIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4sYSxpbWcsZm9udCxiIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1pbmltdW1yYXRpbyI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWluaW11bXNlZWR0aW1lIjogewogICAgICAgICAgICAgICAgInRleHQiOiA3NTYwMAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogImFjZ3JpcCIsCiAgICAibmFtZSI6ICJBQ0cuUklQIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9hY2cucmlwLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IHRydWUsCiAgICAicHJveHkiOiB0cnVlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogIj90ZXJtPXtrZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogInBhZ2Uve3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudGFibGUtaG92ZXIgPiB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3QvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAic3Bhbi50aXRsZSA+IGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInNwYW4udGl0bGUgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLmFjdGlvbiA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5kYXRlID4gdGltZSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGV0aW1lIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5zaXplIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5wZWVycyA+IGRpdi5zZWVkID4gc3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnBlZXJzID4gZGl2LmxlZWNoID4gc3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnBlZXJzID4gZGl2LmRvbmUgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ewogICAgImlkIjogImVhc3RnYW1lIiwKICAgICJuYW1lIjogIlx1NTQxMFx1OWM4MVx1NzU2YSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vcHQuZWFzdGdhbWUub3JnLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmltZGJfMTAwID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWcucHJvX2ZyZWUsaW1nLnByb19mcmVlMnVwIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAib25tb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrLVxcZCstXFxkKyBcXGQrOlxcZCs6XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogImRtaHkiLAogICAgIm5hbWUiOiAiXHU1MmE4XHU2ZjJiXHU4MmIxXHU1NmVkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9kbWh5Lm9yZy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3BpY3MvbGlzdD9rZXl3b3JkPXtrZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogInRvcGljcy9saXN0L3BhZ2Uve3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudGFibGVzb3J0ZXIgPiB0Ym9keSA+IHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCIvdG9waWNzL2xpc3Qvc29ydF9pZC9cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC50aXRsZSA+IGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnRpdGxlID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhLmRvd25sb2FkLWFycm93LmFycm93LW1hZ25ldCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgxKSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=

ewogICAgImlkIjogIm5pY2VwdCIsCiAgICAibmFtZSI6ICJcdTgwMDFcdTVlMDgiLAogICAgImRvbWFpbiI6ICJodHRwczovL3d3dy5uaWNlcHQubmV0LyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmltZGJfMTAwID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWcucHJvX2ZyZWUsaW1nLnByb19mcmVlMnVwIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAib25tb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrLVxcZCstXFxkKyBcXGQrOlxcZCs6XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9

ewogICAgImlkIjogIk9wZW5DRCIsCiAgICAibmFtZSI6ICJcdTc2ODdcdTU0MGUiLAogICAgImRvbWFpbiI6ICJodHRwczovL3d3dy5vcGVuLmNkLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcy9cdTc1MzVcdTVmNzEiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2N1bWVudGFyaWVzL1x1N2VhYVx1NWY1NVx1NzI0NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRpb25zL1x1NTJhOFx1NmYyYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXMvXHU4ZmRlXHU3ZWVkXHU1MjY3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNob3dzL1x1N2VmY1x1ODI3YSIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJwbHVnaW5fZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cInBsdWdpbl9kZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJwbHVnaW5fZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDExKSA+IGkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDEwKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoOSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg2KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQuZW1iZWRkZWQ6bnRoLWNoaWxkKDIpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBpOmhhcyhcImFcIikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzdWJqZWN0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZC5lbWJlZGRlZCA+IGZvbnQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBmb250IgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZC5lbWJlZGRlZCA+IGkgPiBhIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vZGl2W0BjbGFzcz0ndGl0bGUnXS9pbWdbQGNsYXNzPSdwcm9fZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vZGl2W0BjbGFzcz0ndGl0bGUnXS9pbWdbQGNsYXNzPSdwcm9fZnJlZTJ1cCddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL3RyW0BpZD0nc2VlZGVycyddL3RkWzJdL3RleHQoKSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIm5leHVzX3BocCIKfQ==

ewogICAgImlkIjogInpodXF1ZSIsCiAgICAibmFtZSI6ICJcdTY3MzFcdTk2YzAiLAogICAgImRvbWFpbiI6ICJodHRwczovL3podXF1ZS5pbi8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwYXJzZXIiOiAiVE5vZGVTcGlkZXIiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnQvc2VhcmNoIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiY2hyb21lIiwKICAgICAgICAgICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImtleXdvcmQiOiAiLy9pbnB1dFtAaWQ9XCJmb3JtX2l0ZW1fa2V5d29yZFwiXSIsCiAgICAgICAgICAgICAgICAgICAgInN1Ym1pdCI6ICIvL2Zvcm0vL2J1dHRvbltAdHlwZT1cInN1Ym1pdFwiXSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIlJFTkRFUiI6IHRydWUsCiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL3NwYW5bQGNsYXNzPSd0ZXh0LWRvd25sb2FkJ11bY29udGFpbnModGV4dCgpLCcweCcpXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIiCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BjbGFzcz0nYW50LWZvcm0taXRlbS1jb250cm9sLWlucHV0LWNvbnRlbnQnXS9zcGFuW2NvbnRhaW5zKHRleHQoKSwnXHU2YjYzXHU1NzI4XHU1MDVhXHU3OWNkOiApXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogInRub2RlIgp9
ewogICAgImlkIjogInBhbmRhcHQiLAogICAgIm5hbWUiOiAiXHU3MThhXHU3MzJiIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wYW5kYXB0Lm5ldC8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcy9TRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyBJUGFkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTMsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcy9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE0LAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIDEwODBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTUsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgUkVNVVgiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ1MCwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL0JsdVJheSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgQmx1cmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0OTksCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcy9VSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIFVIRCBCbHUtcmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTYsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcy9VSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIDIxNjBwIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxNywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIFNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTgsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyBJUGFkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTksCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyA3MjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjAsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyAxMDgwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDIxLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgUkVNVVgiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ1MSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIEJsdXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNTAwLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgVUhEIEJsdS1yYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIDIxNjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjUsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1NEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyBTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDI2LAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgSVBhZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDcxLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgSVBhZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDI3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDcyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDI4LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgMTA4MGkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyOSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IDEwODBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzAsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyBSRU1VWCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDUyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgQmx1cmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzEsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1VIRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgMjE2MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvU0QiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgSVBhZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDM0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyA3MjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzUsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIDEwODBpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzYsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIDEwODBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzcsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIFJFTVVYIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NTMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIEJsdXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDM4LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9VSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgMjE2MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ0NCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ0NSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgSVBhZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDQ2LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSA3MjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NDcsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIDEwODBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NDgsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIFJFTVVYIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NTQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIEJsdXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDQ5LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSAyMTYwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNTAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSBVSEQgQmx1LXJheSIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYS50b3JyZW50cy10YWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzdWJqZWN0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLmVtYmVkZGVkOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMikgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDIpIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAic3BhbixhLGltZyxmb250LGIiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDIpID4gc3Bhblt0aXRsZT1cIlwiXSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogImhoYW5jbHViIiwKICAgICJuYW1lIjogIlx1NjFhOFx1NjFhOCIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInByb3h5IjogZmFsc2UsCiAgICAiZG9tYWluIjogImh0dHBzOi8vaGhhbmNsdWIudG9wLyIsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIsCiAgICAgICAgICAgICJzZWFyY2hfYXJlYSI6IDAKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImJhdGNoIjogewogICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgIH0sCiAgICAiYnJvd3NlIjoge30sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYudG9ycmVudHMtdGFibGUgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCg0KSA+IGRpdiIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LWluZm8gPiBkaXYudG9ycmVudC1pbmZvLXRleHQ6bnRoLWNoaWxkKDEpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYudG9ycmVudC1pbmZvLXRleHQgPiBhW2hyZWYqPVwiI3NlZWRlcnNcIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYudG9ycmVudC1pbmZvLXRleHQgPiBhW2hyZWYqPVwiI2xlZWNoZXJzXCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LWluZm8gPiBkaXYudG9ycmVudC1pbmZvLXRleHQ6bnRoLWNoaWxkKDIpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LWluZm8gPiBkaXYudG9ycmVudC1pbmZvLXRleHQ6bnRoLWNoaWxkKDIpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJzcGFuLnByb21vdGlvbi10YWctZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgInNwYW4ucHJvbW90aW9uLXRhZy1mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLTUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLTUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLTMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJzcGFuLnByb21vdGlvbi10YWctNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLWZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJzcGFuLnByb21vdGlvbi10YWctMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LXRpdGxlID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBzcGFuLnRhZyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIkFuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1hdGlvbnMvXHU1MmE4XHU2ZjJiIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucy9cdTUyYThcdTZmMmIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1OGZkZVx1N2VlZFx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9kaXZbQGNsYXNzPSd3aGl0ZXNwYWNlLW5vd3JhcCddL3NwYW5bQGNsYXNzPSdwcm9tb3Rpb24tdGFnLWZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2RpdltAY2xhc3M9J3doaXRlc3BhY2Utbm93cmFwJ10vc3BhbltAY2xhc3M9J3Byb21vdGlvbi10YWctMnhmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbCiAgICAgICAgICAgICIvL3NwYW5bY29udGFpbnModGV4dCgpLCAnSCZSJyldIgogICAgICAgIF0sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3NlZWRlci1jb3VudCddIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAibmV4dXNfcGhwIgp9





ewogICAgImlkIjogImloZGJpdHMiLAogICAgIm5hbWUiOiAiaUhEQml0cyIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vaWhkYml0cy5tZS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucy9cdTUyYThcdTZmMmIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1OGZkZVx1N2VlZFx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nW2RhdGEtb3JpZ10iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLW9yaWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBhLnRvcnJlbnRzLXRhZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuZW1iZWRkZWQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=

ewogICAgImlkIjogImlwdG9ycmVudHMiLAogICAgIm5hbWUiOiAiSVBUIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9pcHRvcnJlbnRzLmNvbS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0P3E9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlW2lkPVwidG9ycmVudHNcIl0gdHIiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIi90L1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCIvdC9cIl0iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogMAogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIi90L1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL2Rvd25sb2FkLnBocC9cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAibHN0cmlwIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLyIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBkaXYiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBkaXYiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBkaXYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJzcGxpdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVfZW5fZWxhcHNlZF9wYXJzZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDkpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAic3Bhbi5mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibWluaW11bXJhdGlvIjogewogICAgICAgICAgICAgICAgInRleHQiOiAxCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtaW5pbXVtc2VlZHRpbWUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6IDEyMDk2MDAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ewogICAgImlkIjogImh0cHQiLAogICAgIm5hbWUiOiAiXHU2ZDc3XHU2OGUwIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly93d3cuaHRwdC5jYy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BpZD0ncGVlcmNvdW50J10vYlsxXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogIm1pa2FuYW5pIiwKICAgICJuYW1lIjogIk1pS2FuIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9taWthbmltZS50di8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJIb21lL1NlYXJjaD9zZWFyY2hzdHI9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAiSG9tZS9DbGFzc2ljL3twYWdlfSIsCiAgICAgICAgInN0YXJ0IjogMQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5jZW50cmFsLWNvbnRhaW5lciA+IHRhYmxlID4gdGJvZHkgPiB0ci5qcy1zZWFyY2gtcmVzdWx0cy1yb3ciCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidHIuanMtc2VhcmNoLXJlc3VsdHMtcm93IiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiZGF0YS1pdGVtaW5kZXgiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMSkgPiBhLm1hZ25ldC1saW5rLXdyYXAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgxKSA+IGEubWFnbmV0LWxpbmstd3JhcCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMSkgPiBhLmpzLW1hZ25ldC5tYWduZXQtbGluayIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtY2xpcGJvYXJkLXRleHQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgzKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ewogICAgImlkIjogImNpbmVtYWdlZGRvbiIsCiAgICAibmFtZSI6ICJDaW5lbWFHZWRkb24iLAogICAgImRvbWFpbiI6ICJodHRwczovL2NpbmVtYWdlZGRvbi5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAiYnJvd3NlLnBocD9zZWFyY2g9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogImZvcm0gPiB0YWJsZS50b3JyZW50dGFibGUgPiB0Ym9keSA+IHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiYnJvd3NlLnBocD9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBub2JyIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkgPiBub2JyIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAic3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpID4gYiA+IGEgPiBmb250IgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpID4gYiA+IGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikgPiBhIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9

ewogICAgImlkIjogInB0c2JhbyIsCiAgICAibmFtZSI6ICJcdTcwZTdcdTUzMDVcdTRlNTBcdTU2ZWQiLAogICAgImRvbWFpbiI6ICJodHRwczovL3B0c2Jhby5jbHViLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyhcdTc1MzVcdTVmNzEpIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzKFx1NzUzNVx1ODljNlx1NTI2NykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvT3RoZXIiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3MoXHU3NTM1XHU4OWM2XHU4MjgyXHU3NmVlKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRpb25zKFx1NTJhOFx1NmYyYikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcyhcdThiYjBcdTVmNTVcdTcyNDcpIgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzIHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwidG9ycmVudHMucGhwP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDkpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGRbY2xhc3M9XCJlbWJlZGRlZFwiXSA+IGZvbnQgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdGQgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogIjBmZiIsCiAgICAibmFtZSI6ICJcdTgxZWFcdTc1MzFcdTUxOWNcdTU3M2EiLAogICAgImRvbWFpbiI6ICJodHRwczovL3B0LjBmZi5jYy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWdbZGF0YS1vcmlnXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtb3JpZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0YWdzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGEudG9ycmVudHMtdGFnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5lbWJlZGRlZDpudGgtY2hpbGQoMikgPiBkaXYgPiBkaXZbc3R5bGVdID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4sYSxpbWcsZm9udCxiIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vaW1nW0BjbGFzcz0naGl0YW5kcnVuJ10iCiAgICAgICAgXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BpZD0ncGVlcmNvdW50J10vYlsxXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==


ewogICAgImlkIjogImhkIiwKICAgICJuYW1lIjogIkhEQUkiLAogICAgImRvbWFpbiI6ICJodHRwczovL3d3dy5oZC5haS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwYXJzZXIiOiAiUmVuZGVyU3BpZGVyIiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJUb3JyZW50cy5pbmRleCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImNocm9tZSIsCiAgICAgICAgICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAgICAgICAgICJrZXl3b3JkIjogIi8vaW5wdXRbQG5hbWU9XCJrZXl3b3JkXCJdIiwKICAgICAgICAgICAgICAgICAgICAic3VibWl0IjogIi8vZGl2W0BpZD1cInNlYXJjaC1jb250YWluZXJcIl0vL2J1dHRvbltAdHlwZT1cInN1Ym1pdFwiXSIsCiAgICAgICAgICAgICAgICAgICAgInNjcmlwdCI6ICJkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2VhcmNoLWNvbnRhaW5lcicpWzBdLmNsYXNzTmFtZSArPSBcIiBsYXl1aS1zaG93XCIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmxheXVpLXRhYmxlLWJvZHkubGF5dWktdGFibGUtbWFpbiA+IHRhYmxlIHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0gPiBiIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aGFzaD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtkYXRhLWZpZWxkPVwiYWRkZWRcIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLWNvbnRlbnQiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkW2RhdGEtZmllbGQ9XCJhZGRlZFwiXSA+IGRpdiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkW2RhdGEtZmllbGQ9XCJzaXplXCJdID4gZGl2IgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtkYXRhLWZpZWxkPVwic2VlZGVyc1wiXSA+IGRpdiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkW2RhdGEtZmllbGQ9XCJsZWVjaGVyc1wiXSA+IGRpdiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkW2RhdGEtZmllbGQ9XCJ0aW1lc19jb21wbGV0ZWRcIl0gPiBkaXYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGRbZGF0YS1maWVsZD1cIm5hbWVcIl0gPiBkaXYiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJhLHNlY3Rpb24saW1nLHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtkYXRhLWZpZWxkPVwibmFtZVwiXSA+IGRpdiA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9pbWdbQGNsYXNzPSdwcm9fZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFtdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogInVsdHJhaGQiLAogICAgIm5hbWUiOiAidWx0cmFoZCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vdWx0cmFoZC5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibWluaW11bXJhdGlvIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5oaXRhbmRydW4iOiAzLAogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWluaW11bXNlZWR0aW1lIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5oaXRhbmRydW4iOiAxMjA5NjAwLAogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9


ewogICAgImlkIjogIm5hbnlhbmdwdCIsCiAgICAibmFtZSI6ICJcdTUzNTdcdTZkMGIiLAogICAgImRvbWFpbiI6ICJodHRwczovL25hbnlhbmdwdC5jb20vIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiBmb3JtID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmltZGJfMTAwID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWcucHJvX2ZyZWUsaW1nLnByb19mcmVlMnVwIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAib25tb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrLVxcZCstXFxkKyBcXGQrOlxcZCs6XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFtdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9


ewogICAgImlkIjogImNvbWljYXQiLAogICAgIm5hbWUiOiAiXHU2ZjJiXHU1NWI1XHU1MmE4XHU2ZjJiIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly93d3cuY29taWNhdC5vcmciLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInNlYXJjaC5waHA/a2V5d29yZD17a2V5d29yZH0mcGFnZT17cGFnZX0iLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiI2RhdGFfbGlzdCB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtb2YtdHlwZSgzKSBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZml0bGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNob3ctKFxcdyspLmh0bWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLW9mLXR5cGUoMykgYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1vZi10eXBlKDMpIGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAic3BsaXQiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICItIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJzcGxpdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIi4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImFwcGVuZGxlZnQiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJtYWduZXQ6P3h0PXVybjpidGloOiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLW9mLXR5cGUoOCkgYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLW9mLXR5cGUoNCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1vZi10eXBlKDUpIHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtb2YtdHlwZSg2KSBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtb2YtdHlwZSgxKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ewogICAgImlkIjogInB0dGltZSIsCiAgICAibmFtZSI6ICJQVFx1NjVmNlx1OTVmNCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3LnB0dGltZS5vcmcvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzKFx1NzUzNVx1NWY3MSkiLAogICAgICAgICAgICAgICAgImRlZmF1bHQiOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXMoXHU3NTM1XHU4OWM2XHU1MjY3KSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cyhcdTdlZmNcdTgyN2EpIiwKICAgICAgICAgICAgICAgICJkZWZhdWx0IjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvY3VtZW50YXJpZXMoXHU3ZWFhXHU1ZjU1XHU3MjQ3KSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDMwLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRlKDNEXHU1MmE4XHU3NTNiXHUzMDAxMi41XHU2YjIxXHU1MTQzKSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDMxLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBQ0dOKFx1NGU4Y1x1NmIyMVx1NTE0MykiLAogICAgICAgICAgICAgICAgImRlZmF1bHQiOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogIiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByNSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInNyYyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg5KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvbnQucHJvbW90aW9uLmZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJmb250LnByb21vdGlvbi50d291cGZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJmb250LnByb21vdGlvbi50d291cGhhbGZkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJmb250LnByb21vdGlvbi5oYWxmZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiZm9udC5wcm9tb3Rpb24udGhpcnR5cGVyY2VudCI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJmb250LnByb21vdGlvbi50d291cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImZvbnQucHJvbW90aW9uLnR3b3VwaGFsZmRvd24iOiAyLAogICAgICAgICAgICAgICAgICAgICJmb250LnByb21vdGlvbi50d291cGZyZWUiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZC5lbWJlZGRlZCA+IGZvbnQiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IGEgPiBzcGFuLnRhZ3MiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIsCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nemVyb3VwemVyb2Rvd24nXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BpZD0ncGVlcmNvdW50J10vYlsxXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIm5leHVzX3BocCIKfQ==
ewogICAgImlkIjogInB0Y2hpbmEiLAogICAgIm5hbWUiOiAiXHU5NGMyXHU5MWQxXHU1YjY2XHU5NjYyIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdGNoaW5hLm9yZy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1NzUzNVx1ODljNlx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2N1bWVudGFyaWVzL1x1N2VhYVx1NWY1NVx1NzI0NyIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWdbZGF0YS1vcmlnXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtb3JpZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0YWdzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGEudG9ycmVudHMtdGFnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5lbWJlZGRlZDpudGgtY2hpbGQoMikgPiBkaXYgPiBkaXZbc3R5bGVdID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgxKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4sYSxpbWcsZm9udCxiIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgxKSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogInRvcnJlbnRsZWVjaCIsCiAgICAibmFtZSI6ICJUb3JyZW50TGVlY2giLAogICAgImRvbWFpbiI6ICJodHRwczovL3d3dy50b3JyZW50bGVlY2gub3JnLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInBhcnNlciI6ICJUb3JyZW50TGVlY2giLAogICAgInB1YmxpYyI6IGZhbHNlCn0=

ewogICAgImlkIjogImhkcHQiLAogICAgIm5hbWUiOiAiXHU2NjBlXHU2NTU5IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9oZHB0Lnh5ei8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWdbZGF0YS1vcmlnXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtb3JpZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0YWdzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGEudG9ycmVudHMtdGFnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5lbWJlZGRlZDpudGgtY2hpbGQoMikgPiBkaXYgPiBkaXZbc3R5bGVdID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4sYSxpbWcsZm9udCxiIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BpZD0ncGVlcmNvdW50J10vYlsxXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogImZpbGVsaXN0IiwKICAgICJuYW1lIjogIkZpbGVMaXN0IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9maWxlbGlzdC5pby8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJicm93c2UucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoX2ZpZWxkIjogIntrZXl3b3JkfSIsCiAgICAgICAgICAgICJjIjogIk0iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi52aXNpdGVkbGlua3MgPiBkaXYudG9ycmVudHJvdyIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicG9zdGVyIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInNwYW5bZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8aW1nIHNyYz0nKFteJ10rKSc+IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJicm93c2UucGhwP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXY6bnRoLWNoaWxkKDYpIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2Om50aC1jaGlsZCg2KSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdjpudGgtY2hpbGQoNikiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlSDolTTolUyVkLyVtLyVZIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2Om50aC1jaGlsZCg5KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdjpudGgtY2hpbGQoMTApIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2Om50aC1jaGlsZCg4KSA+IHNwYW4gPiBmb250IiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZ1thbHQ9XCJGcmVlTGVlY2hcIl0iOiAwLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZ1thbHQ9XCJEb3VibGVVcFwiXSI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtaW5pbXVtcmF0aW8iOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1pbmltdW1zZWVkdGltZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogMTcyODAwCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ewogICAgImlkIjogImhkYmQiLAogICAgIm5hbWUiOiAiXHU0ZjBhXHU3NTM4XHU1NmVkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdC5oZGJkLnVzLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZ1t0aXRsZV1bc3JjPVwicGljL2NhdHRyYW5zLmdpZlwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQ6aGFzKFwiYVt0aXRsZV1cIikiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLCBhLCBiIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZDpoYXMoXCJhW3RpdGxlXVwiKSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ewogICAgImlkIjogInptcHQiLAogICAgIm5hbWUiOiAiXHU3ZWM3XHU2OGE2IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly96bXB0LmNjLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcy9cdTdlZmNcdTU0MDgtXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlZmNcdTU0MDgtXHU3ZWFhXHU1ZjU1XHU3MjQ3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNlcmllcy9cdTdlZmNcdTU0MDgtXHU3NTM1XHU4OWM2XHU1MjY3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNob3dzL1x1N2VmY1x1NTQwOC1cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxNywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgQ2hpbmEvXHU1MmE4XHU2ZjJiLVx1NTZmZFx1NmYyYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE4LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSBKYXBhbi9cdTUyYThcdTZmMmItXHU2NWU1XHU2ZjJiIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTksCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIEtvcmVhbi9cdTUyYThcdTZmMmItXHU5N2U5XHU2ZjJiIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjAsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIEV1cm9wZSBhbmQgQW1lcmljYS9cdTUyYThcdTZmMmItXHU2YjI3XHU3ZjhlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjEsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIE90aGVyL1x1NTJhOFx1NmYyYi1cdTUxNzZcdTRlZDYiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nW2RhdGEtb3JpZ10iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLW9yaWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBhLnRvcnJlbnRzLXRhZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuZW1iZWRkZWQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogInRvcnJlbnRnYWxheHkiLAogICAgIm5hbWUiOiAiVG9ycmVudEdhbGF4eSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vdG9ycmVudGdhbGF4eS50by8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9CiAgICB9LAogICAgImJyb3dzZXIiOiB7CiAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwP3NvcnQ9aWQmb3JkZXI9ZGVzYyZwYWdlPXtwYWdlfSIKICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYudGd4dGFibGUgPiBkaXYudGd4dGFibGVyb3cudHhsaWdodCIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWZ+PVwiL3RvcnJlbnQvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYS50eGxpZ2h0ID4gYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYS50eGxpZ2h0IiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50eGxpZ2h0ID4gYVtocmVmKj1cIm1hZ25ldDpcIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXY6bnRoLWNoaWxkKDEyKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LnR4bGlnaHQgPiBzcGFuLmJhZGdlLmJhZGdlLXNlY29uZGFyeS50eGxpZ2h0IgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJzcGFuW3RpdGxlPVwiU2VlZGVycy9MZWVjaGVyc1wiXSA+IGZvbnRbY29sb3I9XCJncmVlblwiXSA+IGIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJzcGFuW3RpdGxlPVwiU2VlZGVycy9MZWVjaGVyc1wiXSA+IGZvbnRbY29sb3I9XCIjZmYwMDAwXCJdID4gYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==


ewogICAgImlkIjogInNzZCIsCiAgICAibmFtZSI6ICJcdTY2MjVcdTU5MjkiLAogICAgImRvbWFpbiI6ICJodHRwczovL3NwcmluZ3N1bmRheS5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNTAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzKFx1NzUzNVx1NWY3MSkiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNTAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXMoXHU1MjY3XHU5NmM2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNTAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2NzKFx1N2VhYVx1NWY1NSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDUwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucyhcdTUyYThcdTc1M2IpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA1MDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNob3dzKFx1N2VmY1x1ODI3YSkiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImltZGIuY29tL3RpdGxlL3R0XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1sYXN0LWNoaWxkKDYpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtbGFzdC1jaGlsZCg2KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWxhc3QtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtbGFzdC1jaGlsZCg0KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtbGFzdC1jaGlsZCgzKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtbGFzdC1jaGlsZCgyKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQgPiBkaXYudG9ycmVudC1zbWFsbGRlc2NyIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAiYSwgYiwgaW1nLCBzcGFuIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQgPiBkaXYudG9ycmVudC1zbWFsbGRlc2NyID4gYSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vaW1nW0BjbGFzcz0naGl0YW5kcnVuJ10iCiAgICAgICAgXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BpZD0ncGVlcmNvdW50J10vYlsxXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==

ewogICAgImlkIjogIm55YWEiLAogICAgIm5hbWUiOiAiTnlhYSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vbnlhYS5zaS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICI/Zj0wJmM9MF8wJnE9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAiP3A9e3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudC1saXN0ID4gdGJvZHkgPiB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3ZpZXcvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykgPiBhW2hyZWYqPVwiL2Rvd25sb2FkL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ewogICAgImlkIjogImF6dXNhIiwKICAgICJuYW1lIjogIlx1Njg5M1x1NTViNSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vYXp1c2Eud2lraS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGRbY2xhc3M9XCJlbWJlZGRlZFwiXSA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkLmVtYmVkZGVkIiwKICAgICAgICAgICAgICAgICJpbmRleCI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9

ewogICAgImlkIjogImV6dHYiLAogICAgIm5hbWUiOiAiRVpUViIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vZXp0di5yZS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAic2VhcmNoL3trZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogInBhZ2Vfe3BhZ2V9IgogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLmZvcnVtX2hlYWRlcl9ib3JkZXIgPiB0cltuYW1lXSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBhW2hyZWYqPVwiL2VwL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykgPiBhW2hyZWYqPVwiLnRvcnJlbnRcIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSA+IGZvbnQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ewogICAgImlkIjogImhkZmFucyIsCiAgICAibmFtZSI6ICJcdTdlYTJcdThjNDZcdTk5NmQiLAogICAgImRvbWFpbiI6ICJodHRwczovL2hkZmFucy5vcmcvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzL1x1NzUzNVx1NWY3MSIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInR2IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNlcmllcy9cdTc1MzVcdTg5YzZcdTUyNjciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxNiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3MvXHU3ZWZjXHU4MjdhIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTcsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1hdGlvbnMvXHU1MmE4XHU2ZjJiIgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtjbGFzcz1cImVtYmVkZGVkXCJdID4gZm9udCA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDIpIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAiYSxpbWcsc3BhbiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogImhhcmVzIiwKICAgICJuYW1lIjogIlx1NzY3ZFx1NTE1NCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vY2x1Yi5oYXJlcy50b3AvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCxpbWcucHJvXzUwcGN0ZG93bixpbWcucHJvXzUwcGN0ZG93bjJ1cCxpbWcucHJvXzMwcGN0ZG93biIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtZCIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZHs0fS1cXGR7Mn0tXFxkezJ9IFxcZHsyfTpcXGR7Mn06XFxkezJ9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYubGF5dWktdG9ycmVudHMtU3ViamVjdCA+IGRpdi5sZWZ0ID4gcC5sYXl1aS1lbGlwLmxheXVpLXRvcnJlbnRzLWRlc2NyLXdpZHRoIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5sYXl1aS10b3JyZW50cy1TdWJqZWN0ID4gZGl2LmxlZnQgPiBwLmxheXVpLWVsaXAubGF5dWktdG9ycmVudHMtZGVzY3Itd2lkdGggPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vYltAY2xhc3M9J2ZyZWUnXVt0ZXh0KCk9J1x1NTE0ZFx1OGQzOSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vYltAY2xhc3M9J3R3b3VwZnJlZSddW3RleHQoKT0nMlhcdTUxNGRcdThkMzknXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogIkF2Z3YiLAogICAgIm5hbWUiOiAiXHU4MjdlXHU4NTg3IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9hdmd2LmNjLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmltZGJfMTAwID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWcucHJvX2ZyZWUsaW1nLnByb19mcmVlMnVwIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAib25tb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrLVxcZCstXFxkKyBcXGQrOlxcZCs6XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
